//
//  MoviesViewController.swift
//  MovieDB
//
//  Created by Igor Andruskiewitsch on 18/02/2019.
//  Copyright (c) 2019 Igor Andruskiewitsch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesDisplayLogic: class
{
  func displayMovies(movies: [Movies.List.ViewModel])
  func displayError()
}

class MoviesViewController: UIViewController, MoviesDisplayLogic
{
  var interactor: MoviesBusinessLogic?
  var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)?
  
  // MARK: outlets
  
  @IBOutlet weak var errorView: UITextView!
  @IBOutlet weak var moviesTableView: UITableView!
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MoviesInteractor()
    let presenter = MoviesPresenter()
    let router = MoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if segue.destination is SingleMovieViewController {
      let vc = segue.destination as? SingleMovieViewController
      vc?.movie = self.selectedMovie
    }

    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    errorView.isHidden = true
    refreshMovies()
  }
  
  // MARK: fetch movies
  
  var movies: [Movies.List.ViewModel] = []
  var selectedMovie: Movies.List.ViewModel?
  
  func refreshMovies()
  {
    interactor?.fetchMovies()
  }
  
  func displayError() {
    errorView.text = "Ocurrio un error al buscar las peliculas"
    errorView.isHidden = false
  }
  
  func displayMovies(movies: [Movies.List.ViewModel])
  {
    errorView.isHidden = true
    self.movies = movies
    self.moviesTableView.reloadData()
  }
  
  func displayMovie(_ movie: Movies.List.ViewModel) {
    self.selectedMovie = movie
    self.performSegue(withIdentifier: "SingleMovieSegue", sender: self)
  }
}

// MARK: extensions

extension MoviesViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return self.movies.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "MovieCell") as! MovieCell
    let movie = self.movies[indexPath.row]
    
    cell.selectionStyle = .none
    cell.populate(with: movie)
    return cell
  }

}

extension MoviesViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let movie = self.movies[indexPath.row]
    self.displayMovie(movie)
  }
}
