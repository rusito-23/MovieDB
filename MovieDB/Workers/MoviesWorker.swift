//
//  MoviesWorker.swift
//  MovieDB
//
//  Created by Igor Andruskiewitsch on 18/02/2019.
//  Copyright (c) 2019 Igor Andruskiewitsch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import UIKit
import Alamofire

class MoviesWorker {

  // MARK: variables
  // discover
  private let endPoint = "https://api.themoviedb.org/3/"
  private let filterStarter = "/movie?"
  private let apiKey = "api_key=***REMOVED***"
  
  // poster
  private let posterEndPoint = "https://image.tmdb.org/t/p/original"
  
  // general
  private let urlSession = URLSession(configuration: .default)
  
  enum Action: String {
    case discover
    case poster
  }
  
  // MARK: private util methods
  
  private func createUrl(for action: Action, with path: String?) -> URL? {
    switch action {
    case .discover:
      return URL(string: endPoint + action.rawValue + filterStarter + apiKey)
    case .poster:
      guard let `path` = path else {
        return nil
      }
      return URL(string: posterEndPoint + path)
    }
  }
  
  // MARK: public methods
  
  func findAll(completion: @escaping (Movies.List.Response?) -> Void) {
    guard let url = createUrl(for: .discover, with: nil) else {
      completion(nil)
      return
    }
    
    Alamofire.request(url,
               method: .get,
               parameters: ["include_docs": "true"])
      .validate()
      .responseJSON { response in
        guard response.result.isSuccess else {
          completion(nil)
          return
        }
        
        guard let value = response.result.value as? [String: Any],
          let movies = value["results"] as? [[String: Any]] else {
            print("Malformed data received from findAllMovies service")
            completion(nil)
            return
        }
        
        let result = Movies.List.Response(json: movies)
        completion(result)
    }
    
  }
  
  func fetchPoster(for movie: Movies.List.ViewModel, completion: @escaping (UIImage?, Movies.List.ViewModel) -> Void) {
    guard let url = createUrl(for: .poster, with: movie.posterUrl) else {
      completion(nil, movie)
      return
    }
    
    Alamofire.request(url, method: .get)
      .validate()
      .responseData(completionHandler: { (responseData) in
        guard let image = UIImage(data: responseData.data!) else {
          completion(nil, movie)
          return
        }
        completion(image, movie)
      })
    
  }
  
}
