//
//  MoviesInteractor.swift
//  MovieDB
//
//  Created by Igor Andruskiewitsch on 18/02/2019.
//  Copyright (c) 2019 Igor Andruskiewitsch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol MoviesBusinessLogic
{
  func findMovies()
}

class MoviesInteractor: MoviesBusinessLogic
{
  var presenter: MoviesPresentationLogic?
  var movieService: MovieService? = MovieService()
  var movieDAO = GenericDAOImpl<Movie>()
  
  // MARK: find Movies
  
  func findMovies()
  {
    let movies: [Movie] = movieDAO.findAll()
    if movies.count != 0 {
      // populate with db content
      logger.verbose("Finding from db")
      self.presentWithoutPosters(movies)
    } else {
      // bring the movies from the api
      logger.verbose("Fetching from Service")
      movieService?.findAll(completion: self.onMoviesFetched)
    }
  }
  
  // MARK: handle MovieService response
  func onMoviesFetched(response: Movies.Response?) {
    guard let res = response else {
      presenter?.presentMovies(nil)
      return
    }
    self.presentWithoutPosters(res.movies)

    // save them into the db
    _ = movieDAO.saveAll(res.movies)
  }

  // MARK: common methods for Service and DB responses
  
  // present without posters, currently used
  func presentWithoutPosters(_ movies: [Movie]) {
    let viewModels: [Movies.ViewModel] = movies.map { $0.asViewModel(poster: nil) }
    self.presenter?.presentMovies(viewModels)
  }
  
}
