//
//  MoviesInteractor.swift
//  MovieDB
//
//  Created by Igor Andruskiewitsch on 18/02/2019.
//  Copyright (c) 2019 Igor Andruskiewitsch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesBusinessLogic
{
  func findMovies()
}

protocol MoviesDataStore
{
  var movie: Movies.ViewModel? { get }
}

class MoviesInteractor: MoviesBusinessLogic, MoviesDataStore
{
  var presenter: MoviesPresentationLogic?
  var movieService: MovieService?
  var movie: Movies.ViewModel?

  // MARK: find Movies
  
  func findMovies()
  {
    // TODO: si no estÃ¡n en db, buscarlas con la API
    // if not in db {
    movieService = MovieService()
    movieService?.findAll(completion: self.onMoviesFetched)
    // else
    // fetchFromDBBB
  }
  
  // MARK: handle MovieService response
  func onMoviesFetched(response: Movies.Response?) {
    guard let res = response else {
      presenter?.presentMovies(nil)
      return
    }
    
    let dispatchGroup = DispatchGroup()
    
    var movies: [Movies.ViewModel] = []
    for movie in res.movies {
      dispatchGroup.enter()
      movieService?.fetchPoster(for: movie, completion: { (_ poster: UIImage?) -> Void in
        print("Fetched poster")
        
        var viewModel = Movies.ViewModel()
        viewModel.title = movie.title
        viewModel.overview = movie.overview
        viewModel.poster = poster
        
        movies.append(viewModel)
        dispatchGroup.leave()
      })
    }
    
    // wait for all images to be loaded
    dispatchGroup.notify(queue: .main) { [weak self] in
      print("All posters fetched")
      guard let `self` = self else {
        return
      }
      self.presenter?.presentMovies(movies)
    }
  }


}
