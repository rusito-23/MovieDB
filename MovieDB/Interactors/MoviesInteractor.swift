//
//  MoviesInteractor.swift
//  MovieDB
//
//  Created by Igor Andruskiewitsch on 18/02/2019.
//  Copyright (c) 2019 Igor Andruskiewitsch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol MoviesInteractor {
  func findMovies()
  func refreshMovies()
  var presenter: MoviesPresenter? { get set }
}

class MoviesInteractorImpl: MoviesInteractor {
  var presenter: MoviesPresenter?
  
  // MARK: setup
  
  var movieService: MovieService?
  var movieDAO = GenericDAOImpl<Movie>()
  
  // MARK: protocol implementation
  
  func findMovies() {
    movieDAO.findAll(completion: { [weak self] (movies: [Movie]) -> () in
      guard let `self` = self else { return }

      if movies.count != 0 {
        // populate with db content
        logger.verbose("Finding from db")
        self.presentWithoutPosters(movies)
      } else {
        // bring the movies from the api
        logger.verbose("Fetching from Service")
        self.movieService?.findAll(completion: self.onMoviesFetched)
      }
    })
  }
  
  func refreshMovies() {
    logger.info("reloading movies")
    movieDAO.deleteAll(completion: {(error: Bool) -> () in
      sleep(10)
      logger.info("deleting old movies:: completed")
      // force populate from service
      logger.verbose("Fetching from Service")
      self.movieService?.findAll(completion: self.onMoviesFetched)
    })
  }
  
  
  // MARK: handle responses
  
  func onMoviesFetched(response: Movies.Response?) {
    guard let res = response else {
      presenter?.presentMovies(nil)
      return
    }
    // save them into the db
    self.movieDAO.saveAll(res.movies, completion: {(count: Int) -> () in
      self.movieDAO.findAll(completion: { (movies: [Movie]) -> () in
        self.presentWithoutPosters(movies)
      })
    })
  }

  func presentWithoutPosters(_ movies: [Movie]) {
    let viewModels: [Movies.ViewModel] = movies.map { $0.asViewModel(poster: nil) }
    self.presenter?.presentMovies(viewModels)
  }
  

}
